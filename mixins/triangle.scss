///
/// Creates a triangle on one of the edges of an element
///
/// @author Eduardo Boucas
///
/// @link http://codepen.io/eduardoboucas/pen/JomROG
///
/// @param {String}   $pos - Which edge to create the triangle on
/// @param {Length}   $offset - The offset from the origin (top or left) on the edge
/// @param {String}   $direction - Direction of the triangle (in or out)
/// @param {Length}   $width - Width of the triangle
/// @param {String}   $type - Type of the pseudo-element (before or after)
///
/// @example scss - A triangle on the left edge of the parent, 15px from the top, pointing out with a width of 30px
///   @include triangle('left', 15px, 'out', 30px);
///
/// @example scss - A triangle on the bottom edge of the parent, 220px from the left, pointing out, with a width of 60px and using a :before
///   @include triangle('bottom', 220px, 'out', 60px, 'before');
///
@mixin triangle($pos, $offset, $direction, $width, $type: 'after') {
  position: relative;

  &:#{$type} {
    position: absolute;
    content: '';
    z-index: 9999;

    // Reset position and offsets
    top: auto;
    bottom: auto;
    left: auto;
    right: auto;
    $h-offset: 0;
    $v-offset: 0;

    // Triangle: down
    @if ((($pos == 'top') and ($direction == 'in')) or ($pos == 'bottom') and ($direction == 'out')) {
      border-top: $width solid currentColor;
      border-right: $width solid transparent;
      border-bottom: none;
      border-left: $width solid transparent;

      $v-offset: if($direction == 'in', 0, -$width);
    }

    // Triangle: up
    @if ((($pos == 'top') and ($direction == 'out')) or ($pos == 'bottom') and ($direction == 'in')) {
      border-top: none;
      border-right: $width solid transparent;
      border-bottom: $width solid currentColor;
      border-left: $width solid transparent;

      $v-offset: if($direction == 'in', 0, -$width);
    }

    // Triangle: right
    @if ((($pos == 'left') and ($direction == 'in')) or ($pos == 'right') and ($direction == 'out')) {
      border-top: $width solid transparent;
      border-right: none;
      border-bottom: $width solid transparent;
      border-left: $width solid currentColor;

      $h-offset: if($direction == 'in', 0, -$width);
    }

    // Triangle: left
    @if ((($pos == 'left') and ($direction == 'out')) or ($pos == 'right') and ($direction == 'in')) {
      border-top: $width solid transparent;
      border-right: $width solid currentColor;
      border-bottom: $width solid transparent;
      border-left: none;

      $h-offset: if($direction == 'in', 0, -$width);
    }

    @if ($pos == 'top') {
      top: $v-offset;
      left: if($offset == 'center', calc(50% - #{$width}), $offset);
    } @else if ($pos == 'bottom') {
      bottom: $v-offset;
      left: if($offset == 'center', calc(50% - #{$width}), $offset);
    } @else if ($pos == 'left') {
      top: if($offset == 'center', calc(50% - #{$width}), $offset);
      left: $h-offset;
    } @else if ($pos == 'right') {
      top: if($offset == 'center', calc(50% - #{$width}), $offset);
      right: $h-offset;
    }
  }
}
